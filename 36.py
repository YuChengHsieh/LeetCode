class Solution:
    def isValidSudoku(self, board: list[list[str]]) -> bool:
        row_cnt = [[]for _ in range(9)]
        col_cnt = [[]for _ in range(9)]
        box_cnt = [[]for _ in range(9)]
        
        for i in range(9):
            for j in range(9):
                if board[i][j] != '.':
                    if board[i][j] not in row_cnt[i] and  board[i][j] not in col_cnt[j] \
                        and board[i][j] not in box_cnt[i//3*3+j//3]:
                        row_cnt[i].append(board[i][j])
                        col_cnt[j].append(board[i][j])
                        box_cnt[i//3*3+j//3].append(board[i][j])
                    else:
                        return False
        
        return True

if __name__ == '__main__':
    a = Solution()
    print(a.isValidSudoku(
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]))

    print(a.isValidSudoku(
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]))